{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","style","position","width","textAlign","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","toggleColor","color","mode","selectedColor","showAlert","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","about","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","heading","rows","placeholder","value","onChange","event","target","backgroundColor","newText","split","join","document","getElementById","select","navigator","clipboard","writeText","length","propsTypes","PropTypes","string","isRequired","defaultProps","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","Navbar_Navbar","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.86a42619.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n       let lower = word.toLowerCase();\r\n      return  lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div style={{position:'absolute',width:'100%',textAlign:'center'}}className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Alert","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport './Navbar.css';\r\n\r\nexport default function Navbar(props) {\r\n  const toggleColor = (color)=>{\r\n    if (props.mode===\"dark\"){\r\n         props.selectedColor(color);\r\n    }else{\r\n      props.showAlert(\"First enable dark mode to try this color\",\"warning\");\r\n    }\r\n  }\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/\">\r\n                {props.about}\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <ul className=\"darkThemes\" >\r\n          <li id=\"red\" onClick={()=>toggleColor(\"rgb(86, 28, 28)\")}></li>\r\n          <li id=\"blue\" onClick={()=>toggleColor(\"rgb(21, 60, 91)\")}></li>\r\n          <li id=\"green\" onClick={()=>toggleColor(\"rgb(8, 90, 12)\")}></li>\r\n          <li id=\"yellow\" onClick={()=>toggleColor(\"rgb(101, 103, 10)\")}></li>\r\n        </ul>\r\n        <div className=\"form-check form-switch mx-4\">\r\n          <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n          <label className={`form-check-label text-${props.mode === \"light\" ? \"dark\" : \"light\"}`} htmlFor=\"flexSwitchCheckDefault \">{props.mode === \"dark\" ? \"disable dark Mode\" : \"Enable Dark Mode\"}</label>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propsTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"title here\",\r\n  about: \"About here\",\r\n};","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n  const handleUPClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercase\", \"success\");\r\n  }\r\n\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lowercase\", \"success\");\r\n  }\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text cleared\", \"success\");\r\n  }\r\n\r\n  const handleCopyClick = () => {\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to clipboard\", \"success\");\r\n  }\r\n\r\n  const handleRemoveExtraSpace = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra Spaces Removed\", \"success\");\r\n  }\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n    // console.log(text);\r\n  }\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <><div>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"myBox\" className=\"form-label\"><h2 style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}>{props.heading}</h2></label>\r\n        <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" placeholder=\"Enter your text here\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\", color: props.mode === \"dark\" ? \"white\" : \"black\" }}></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-1 my-1\" onClick={handleUPClick}>Convert to Uppercase</button>\r\n      <button className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n      <button className=\"btn btn-primary mx-1 my-1\" onClick={handleRemoveExtraSpace}>Remove Extra Spaces</button>\r\n      <button className=\"btn btn-primary mx-1 my-1\" onClick={handleCopyClick}>Copy text</button>\r\n      <button className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear text</button>\r\n    </div>\r\n      <div style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}>\r\n        <h2 className='my-3'>Your text summary</h2>\r\n        <p>{text.split(\" \").length - 1} Words and {text.length} Characters</p>\r\n        <p>{0.008 * `${text.split(\" \").length - 1}`} Minute for read</p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length > 0 ? text : \"Enter Somthing in text-box to preview\"}</p>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Alert from './components/Alert';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\n\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\");\r\n  const [alert, setAlert] = useState(null);\r\n  const showAlert = (message, type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type,\r\n    })\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 2000);\r\n  }\r\n  const selectedColor = (color)=>{\r\n    document.body.style.backgroundColor = color;\r\n  }\r\n\r\n  const toggleMode = () => {\r\n    if (mode === \"dark\") {\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"white\";\r\n      showAlert(\"Dark Mode is disabled\", \"success\");\r\n      document.title = \"TextUtils-Light mode\"\r\n    } else {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"#2a335a\";\r\n      showAlert(\"Dark Mode is enabled\", \"success\")\r\n      document.title = \"TextUtils-Dark mode\"\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Navbar title=\"TextUtils\" about=\"About us\" mode={mode} toggleMode={toggleMode} showAlert={showAlert}selectedColor={selectedColor} />\r\n      <Alert alert={alert} />\r\n      <div className=\"container my-3\">\r\n        <TextForm heading=\"Enter the text for analyze\" mode={mode} showAlert={showAlert} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}